version: "3.5"

services:
  api01: &api
    hostname: api01
    image: quarkus/websocket-multiple-instances
    ports:
      - "8081:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka01:9092
      GROUP_ID: group01
    depends_on:
      - kafka01
      - postgres
    deploy:
      resources:
        limits:
          cpus: "0.45"
          memory: "100MB"

  api02:
    <<: *api
    hostname: api02
    ports:
      - "8082:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka01:9092
      GROUP_ID: group02
  nginx:
    image: nginx:latest
    ports:
      - "9999:9999"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "30MB"

  kafka01:
    image: bitnami/kafka:latest
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka01:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka01
      - zookeeper
    ports:
      - "8091:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka01:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: applicationuser
      POSTGRES_USER: applicationuser
      POSTGRES_DB: websocket
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
volumes:
  postgres_data: